# Connects an in-memory exploit Metasploit Module's ruby instance to its persisted
# {Metasploit::Cache::Exploit::Instance}.
class Metasploit::Cache::Exploit::Instance::Persister < Metasploit::Cache::Module::Persister
  extend ActiveSupport::Autoload

  autoload :ExploitTargets
  autoload :ReferencableReferences
  autoload :Stance

  #
  # CONSTANTS
  #

  # Modules used to synchronize attributes and associations before persisting to database.
  SYNCHRONIZERS = [
      Metasploit::Cache::Persister.synchronizer(
          :description,
          :name,
          :privileged,
          disclosure_date: :disclosed_on
      ),
      Metasploit::Cache::Contributable::Persister::Contributions,
      self::ExploitTargets,
      Metasploit::Cache::Licensable::Persister::LicensableLicenses,
      Metasploit::Cache::Referencable::Persister::ReferencableReferences,
      self::Stance
  ]

  #
  # Resurrecting Attributes
  #

  # Cached metadata for this {#ephemeral}.
  #
  # @return [Metasploit::Cache::Exploit::Instance]
  resurrecting_attr_accessor(:persistent) {
    ActiveRecord::Base.connection_pool.with_connection {
      Metasploit::Cache::Exploit::Instance.joins(
          exploit_class: :ancestor
      ).where(
           Metasploit::Cache::Module::Ancestor.arel_table[:real_path_sha1_hex_digest].eq(real_path_sha1_hex_digest)
      ).readonly(false).first
    }
  }

  #
  # Instance Methods
  #

  private

  # {Metasploit::Cache::Module::Ancestor#real_path_sha1_hex_digest} used to resurrect {#auxiliary_instance}.
  #
  # @return [String]
  def real_path_sha1_hex_digest
    ephemeral.class.persister_by_source[:ancestor].real_path_sha1_hex_digest
  end

  # Tags log with {Metasploit::Cache::Exploit::Instance#exploit_class} {Metasploit::Cache::Exploit::Class#ancestor}
  # {Metasploit::Cache::Module::Ancestor#real_pathname}.
  #
  # @param exploit_instance [Metasploit::Cache::Exploit::Instance]
  # @yield [tagged_logger]
  # @yieldparam tagged_logger [ActiveSupport::TaggedLogger] {#logger} with
  #   {Metasploit::Cache::Module#Ancestor#real_pathname} tag.
  # @yieldreturn [void]
  # @return [void]
  def with_tagged_logger(exploit_instance, &block)
    Metasploit::Cache::Module::Ancestor::Persister.with_tagged_logger logger,
                                                                      exploit_instance.exploit_class.ancestor,
                                                                      &block
  end
end