require 'cell/twin'

# Cell for rendering {Metasploit::Cache::Exploit::Instance#exploit_class}
# {Metasploit::Cache::Direct::Class#ancestor} {Metasploit::Cache::Module::Ancestor#contents}.
#
# In addition to content from {Metasploit::Cache::Module::AncestorCell} and
# {Metasploit::Cache::Direct::Class::AncestorCell}, it also includes `#authors` for
# {Metasploit::Cache::Exploit::Instance#contributions}, `#default_target` for
# {Metasploit::Cache::Exploit::Instance#default_exploit_target} {Metasploit::Cache::Exploit:Target#index},
# `#description` for {Metasploit::Cache::Exploit::Instance#description}, `#license` for
# {Metasploit::Cache::Exploit::Instance#licensable_licenses} {Metasploit::Cache::Licensable::Licenses#license}s,
# `#name` for {Metasploit::Cache::Exploit::Instance#name}, and `#targets` for
# {Metasploit::Cache::Exploit::Instance#exploit_targets}.
class Metasploit::Cache::Exploit::Instance::ExploitClass::AncestorCell < Cell::ViewModel
  extend ActiveSupport::Autoload

  include Cell::Twin::Properties

  autoload :Twin

  #
  # Properties
  #

  properties Twin

  #
  # Instance Methods
  #

  def show
    render
  end
end
