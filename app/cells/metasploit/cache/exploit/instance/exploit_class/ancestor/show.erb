# Module Type: <%= exploit_class.ancestor.module_type %>
# Reference Name: <%= exploit_class.ancestor.reference_name %>
class <%= metasploit_class_relative_name %> < <%= superclass %>
  #
  # CONSTANTS
  #

  Rank = <%= exploit_class.rank.number %>

  #
  # Instance Methods
  #

  # Default architecture abbreviations for {#targets} that don't declare their own architecture abbreviations.
  #
  # @return [Array<String>]
  def arch
    []
  end

  def author
    [
<%- last_contribution_index = contributions.length - 1 -%>
<%- contributions.each_with_index do |contribution, index| -%>
  <%- email_address = contribution.email_address

      if email_address
        email = "'#{email_address.full}'"
      else
        email = "nil"
      end

      if index == last_contribution_index
        separator = ''
      else
        separator = ','
      end
  -%>
      OpenStruct.new(name: '<%= contribution.author.name %>', email: <%= email %>)<%= separator %>
<%- end -%>
    ]
  end

  def default_target
<%- if default_exploit_target -%>
    <%= default_exploit_target.index %>
<%- else -%>
    nil
<%- end -%>
  end

  def description
    '<%= description %>'
  end

  def license
    [
<%- last_licensable_license_index = licensable_licenses.length - 1 -%>
<%- licensable_licenses.each_with_index do |licensable_license, index| -%>
  <%- if index == last_licensable_license_index
        separator = ''
      else
        separator = ','
      end -%>
      '<%= licensable_license.license.abbreviation %>'<%= separator %>
<%- end -%>
    ]
  end

  def name
    '<%= name %>'
  end

  # Default platform list for {#targets} that don't declare their own platform list.
  #
  # @return [#platforms]
  def platform
    OpenStruct.new(
      platforms: []
    )
  end

  # Targets of this exploit.
  #
  # @return [Array<#arch, #name, #platform>]
  def targets
    [
<%- last_exploit_target_index = exploit_targets.length - 1 -%>
<%- exploit_targets.each_with_index do |exploit_target, exploit_target_index| -%>
  <%- if last_exploit_target_index == last_exploit_target_index
        exploit_target_separator = ''
      else
        exploit_target_separator = ','
      end -%>
      OpenStruct.new(
        arch: [
  <%- last_architecturable_architecture_index = exploit_target.architecturable_architectures.length - 1 -%>
  <%- exploit_target.architecturable_architectures.each_with_index do |architecturable_architecture, architecturable_architecture_index| -%>
    <%- if architecturable_architecture_index == last_architecturable_architecture_index
          architecturable_architecture_separator = ''
        else
          architecturable_architecture_separator = ','
        end -%>
          '<%= architecturable_architecture.architecture.abbreviation %>'<%= architecturable_architecture_separator %>
  <%- end -%>
        ],
        name: '<%= exploit_target.name %>',
        platform: OpenStruct.new(
                    platforms: [
  <%- last_platformable_platform_index = exploit_target.platformable_platforms.length - 1 -%>
  <%- exploit_target.platformable_platforms.each_with_index do |platformable_platform, platformable_platform_index| -%>
    <%- if platformable_platform_index == last_platformable_platform_index
          platformable_platform_separator = ''
        else
          platformable_platform_separator = ','
        end -%>
                      OpenStruct.new(
                        realname: '<%= platformable_platform.platform.fully_qualified_name %>'
                      )<%= platformable_platform_separator %>
  <%- end -%>
                    ]
                  )
      )<%= exploit_target_separator %>
<%- end -%>
    ]
  end
end