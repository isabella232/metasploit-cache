FactoryGirl.define do
  factory :metasploit_cache_exploit_instance,
          class: Metasploit::Cache::Exploit::Instance,
          traits: [
              :metasploit_cache_exploit_instance_exploit_class_ancestor_contents
          ] do
    transient do
      contribution_count 1
      exploit_target_count 1
      licensable_license_count 1
      referencable_reference_count 1
    end

    description { generate :metasploit_cache_exploit_instance_description }
    disclosed_on { generate :metasploit_cache_exploit_instance_disclosed_on }
    name { generate :metasploit_cache_exploit_instance_name }
    privileged { generate :metasploit_cache_exploit_instance_privileged }
    stance { generate :metasploit_cache_module_stance }

    #
    # Associations
    #

    association :exploit_class, factory: :metasploit_cache_exploit_class

    #
    # Callbacks
    #

    after(:build) { |exploit_instance, evaluator|
      exploit_instance.contributions = build_list(
          :metasploit_cache_exploit_contribution,
          evaluator.contribution_count,
          contributable: exploit_instance
      )

      exploit_instance.exploit_targets = build_list(
          :metasploit_cache_exploit_target,
          evaluator.exploit_target_count,
          exploit_instance: exploit_instance
      )

      exploit_instance.licensable_licenses = build_list(
        :metasploit_cache_exploit_license,
        evaluator.licensable_license_count,
        licensable: exploit_instance
      )

      exploit_instance.referencable_references = build_list(
        :metasploit_cache_exploit_reference,
        evaluator.referencable_reference_count,
        referencable: exploit_instance
      )
    }
  end

  #
  # Sequences
  #

  sequence :metasploit_cache_exploit_instance_description do |n|
    "Metasploit::Cache::Exploit::Instance#description #{n}"
  end

  sequence :metasploit_cache_exploit_instance_disclosed_on do |n|
    n.days.ago
  end

  sequence :metasploit_cache_exploit_instance_name do |n|
    "Metapsloit::Cache::Exploit::Instance#name #{n}"
  end

  sequence :metasploit_cache_exploit_instance_privileged, Metasploit::Cache::Spec.sample_stream([false, true])
  
  #
  # Traits
  #

  trait :metasploit_cache_exploit_instance_exploit_class_ancestor_contents do
    transient do
      exploit_class_ancestor_contents? true
      exploit_class_ancestor_metasploit_class_relative_name { generate :metasploit_cache_module_ancestor_metasploit_module_relative_name }
      exploit_class_ancestor_superclass { 'Metasploit::Cache::Direct::Class::Superclass' }
    end

    after(:build) do |exploit_instance, evaluator|
      if evaluator.exploit_class_ancestor_contents?
        exploit_class = exploit_instance.exploit_class

        if exploit_class.nil?
          raise ArgumentError,
                "#{exploit_instance.class}#exploit_class is `nil` and it can't be used to look up " \
                "Metasploit::Cache::Direct::Class#ancestor to write content. " \
                "If this is expected, set `exploit_class_ancestor_contents?: false` " \
                "when using the :metasploit_cache_exploit_instance_exploit_class_ancestor_contents trait."
        end

        exploit_ancestor = exploit_class.ancestor

        if exploit_ancestor.nil?
          raise ArgumentError,
                "#{exploit_class.class}#ancestor is `nil` and content cannot be written.  " \
                "If this is expected, set `exploit_ancestor_contents?: false` " \
                "when using the :metasploit_cache_exploit_instance_exploit_class_ancestor_contents trait."
        end

        real_pathname = exploit_ancestor.real_pathname

        unless real_pathname
          raise ArgumentError,
                "#{exploit_ancestor.class}#real_pathname is `nil` and content cannot be written.  " \
                "If this is expected, set `exploit_class_ancestor_contents?: false` " \
                "when using the :metasploit_cache_exploit_instance_exploit_class_ancestor_contents trait."
        end

        # make directory
        real_pathname.parent.mkpath

        context = Object.new
        cell = Cell::Base.cell_for(
            'metasploit/cache/exploit/instance/exploit_class/ancestor',
            context,
            exploit_instance,
            metasploit_class_relative_name: evaluator.exploit_class_ancestor_metasploit_class_relative_name,
            superclass: evaluator.exploit_class_ancestor_superclass
        )

        real_pathname.open('wb') do |f|
          f.write(cell.call)
        end
      end
    end
  end
end