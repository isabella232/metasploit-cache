RSpec.describe Metasploit::Cache::Exploit::Instance do
  it_should_behave_like 'Metasploit::Concern.run'

  context 'database' do
    context 'columns' do
      it { is_expected.to have_db_column(:default_exploit_target_id).of_type(:integer).with_options(null: true) }
      it { is_expected.to have_db_column(:description).of_type(:text).with_options(null: false) }
      it { is_expected.to have_db_column(:disclosed_on).of_type(:date).with_options(null: false) }
      it { is_expected.to have_db_column(:exploit_class_id).of_type(:integer).with_options(null: false) }
      it { is_expected.to have_db_column(:name).of_type(:string).with_options(null: false) }
      it { is_expected.to have_db_column(:privileged).of_type(:boolean).with_options(null: false) }
      it { is_expected.to have_db_column(:stance).of_type(:string).with_options(null: false) }
    end

    context 'indices' do
      it { is_expected.to have_db_index(:default_exploit_target_id).unique(true) }
      it { is_expected.to have_db_index(:exploit_class_id).unique(true) }
    end
  end

  context 'associations' do
    it { is_expected.to belong_to(:default_exploit_target).class_name('Metasploit::Cache::Exploit::Target').inverse_of(:exploit_instance) }
    it { is_expected.to belong_to(:exploit_class).class_name('Metasploit::Cache::Exploit::Class').inverse_of(:exploit_instance) }
    it { is_expected.to have_many(:exploit_targets).class_name('Metasploit::Cache::Exploit::Target').dependent(:destroy).inverse_of(:exploit_instance) }
  end

  context 'factory' do
    context 'metasploit_cache_exploit_instance' do
      subject(:metasploit_cache_exploit_instance) {
        FactoryGirl.build(:metasploit_cache_exploit_instance)
      }

      it { is_expected.to be_valid }
    end
  end

  context 'validations' do
    it { is_expected.to validate_presence_of :description }
    it { is_expected.to validate_presence_of :disclosed_on }
    it { is_expected.to validate_presence_of :exploit_class }
    it { is_expected.to validate_presence_of :name }
    it { is_expected.to validate_inclusion_of(:privileged).in_array([false, true]) }
    it { is_expected.to validate_inclusion_of(:stance).in_array(Metasploit::Cache::Module::Stance::ALL) }

    context 'validates inclusion of #default_exploit_target in #exploit_targets' do
      subject(:default_exploit_target_errors) {
        exploit_instance.errors[:default_exploit_target]
      }

      let(:error) {
        I18n.translate!('activerecord.errors.models.metasploit/cache/exploit/instance.attributes.default_exploit_target.inclusion')
      }

      let(:exploit_instance) {
        described_class.new
      }

      context 'without #default_exploit_target' do
        before(:each) do
          exploit_instance.default_exploit_target = nil
        end

        it { is_expected.not_to include(error) }
      end

      context 'with #default_exploit_target' do
        #
        # lets
        #

        let(:default_exploit_target) {
          Metasploit::Cache::Exploit::Target.new
        }

        #
        # Callbacks
        #

        before(:each) do
          exploit_instance.default_exploit_target = default_exploit_target
        end

        context 'in #exploit_targets' do
          before(:each) do
            exploit_instance.exploit_targets = [
                default_exploit_target
            ]
            exploit_instance.valid?
          end

          it { is_expected.not_to include(error) }
        end

        context 'not in #exploit_targets' do
          before(:each) do
            exploit_instance.exploit_targets = []
            exploit_instance.valid?
          end

          it { is_expected.to include(error) }
        end
      end
    end

    # validate_length_of cannot test minimum length on exploit_targets because it tries to tests with a String
    context 'validates length of #exploit_targets is at least 1' do
      subject(:exploit_targets_errors) {
        exploit_instance.errors[:exploit_targets]
      }

      let(:exploit_instance) {
        described_class.new
      }

      let(:error) {
        I18n.translate!('activerecord.errors.models.metasploit/cache/exploit/instance.attributes.exploit_targets.too_short', count: 1)
      }

      context 'with no exploit targets' do
        before(:each) do
          exploit_instance.exploit_targets = []
          exploit_instance.valid?
        end

        it { is_expected.to include(error) }
      end

      context 'with one exploit target' do
        before(:each) do
          exploit_instance.exploit_targets << Metasploit::Cache::Exploit::Target.new
          exploit_instance.valid?
        end

        it { is_expected.not_to include(error) }
      end
    end

    # validate_uniqueness_of needs a pre-existing record of the same class to work correctly when the `null: false`
    # constraints exist for other fields.
    context 'with existing record' do
      let!(:existing_exploit_instance) {
        FactoryGirl.create(
            :metasploit_cache_exploit_instance
        )
      }

      it { is_expected.to validate_uniqueness_of :exploit_class_id }
    end
  end
end