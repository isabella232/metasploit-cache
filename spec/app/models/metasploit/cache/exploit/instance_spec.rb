RSpec.describe Metasploit::Cache::Exploit::Instance, type: :model do
  it_should_behave_like 'Metasploit::Concern.run'

  context 'associations' do
    it { is_expected.to have_many(:contributions).autosave(true).class_name('Metasploit::Cache::Contribution').dependent(:destroy).inverse_of(:contributable) }
    it { is_expected.to belong_to(:default_exploit_target).class_name('Metasploit::Cache::Exploit::Target').inverse_of(:exploit_instance) }
    it { is_expected.to belong_to(:exploit_class).class_name('Metasploit::Cache::Exploit::Class').inverse_of(:exploit_instance).with_foreign_key(:exploit_class_id) }
    it { is_expected.to have_many(:exploit_targets).autosave(true).class_name('Metasploit::Cache::Exploit::Target').dependent(:destroy).inverse_of(:exploit_instance) }
    it { is_expected.to have_many(:licensable_licenses).autosave(true).class_name('Metasploit::Cache::Licensable::License') }
    it { is_expected.to have_many(:licenses).class_name('Metasploit::Cache::License').through(:licensable_licenses) }
    it { is_expected.to have_many(:referencable_references).autosave(true).class_name('Metasploit::Cache::Referencable::Reference').dependent(:destroy).inverse_of(:referencable) }
    it { is_expected.to have_many(:references).class_name('Metasploit::Cache::Reference').through(:referencable_references) }
  end

  context 'database' do
    context 'columns' do
      it { is_expected.to have_db_column(:default_exploit_target_id).of_type(:integer).with_options(null: true) }
      it { is_expected.to have_db_column(:description).of_type(:text).with_options(null: false) }
      it { is_expected.to have_db_column(:disclosed_on).of_type(:date).with_options(null: false) }
      it { is_expected.to have_db_column(:exploit_class_id).of_type(:integer).with_options(null: false) }
      it { is_expected.to have_db_column(:name).of_type(:string).with_options(null: false) }
      it { is_expected.to have_db_column(:privileged).of_type(:boolean).with_options(null: false) }
      it { is_expected.to have_db_column(:stance).of_type(:string).with_options(null: false) }
    end

    context 'indices' do
      it { is_expected.to have_db_index(:default_exploit_target_id).unique(true) }
      it { is_expected.to have_db_index(:exploit_class_id).unique(true) }
    end
  end

  context 'factory' do
    context 'full_metasploit_cache_exploit_instance' do
      subject(:full_metasploit_cache_exploit_instance) {
        FactoryGirl.build(:full_metasploit_cache_exploit_instance)
      }

      it { is_expected.to be_valid }

      context 'metasploit_cache_exploit_instance_exploit_class_ancestor_contents trait' do
        subject(:full_metasploit_cache_exploit_instance) {
          FactoryGirl.build(
              :full_metasploit_cache_exploit_instance,
              exploit_class: exploit_class
          )
        }

        context 'with #exploit_class' do
          let(:exploit_class) {
            FactoryGirl.build(
                :full_metasploit_cache_exploit_class,
                ancestor: exploit_ancestor,
                ancestor_contents?: false
            )
          }

          context 'with Metasploit::Cache::Direct::Class#ancestor' do
            let(:exploit_ancestor) {
              FactoryGirl.build(
                  :metasploit_cache_exploit_ancestor,
                  content?: false,
                  relative_path: relative_path
              )
            }

            context 'with Metasploit::Cache::Module::Ancestor#real_pathname' do
              let(:reference_name) {
                FactoryGirl.generate :metasploit_cache_module_ancestor_reference_name
              }

              let(:relative_path) {
                "exploits/#{reference_name}#{Metasploit::Cache::Module::Ancestor::EXTENSION}"
              }

              it 'writes exploit Metasploit Module to #real_pathname' do
                full_metasploit_cache_exploit_instance

                expect(exploit_ancestor.real_pathname).to exist
              end

              context 'with multiple elements in each association' do
                include_context 'ActiveSupport::TaggedLogging'
                include_context 'Metasploit::Cache::Spec::Unload.unload'

                subject(:full_metasploit_cache_exploit_instance) {
                  FactoryGirl.build(
                      :metasploit_cache_exploit_instance,
                      :metasploit_cache_contributable_contributions,
                      :metasploit_cache_licensable_licensable_licenses,
                      :metasploit_cache_referencable_referencable_references,
                      # @note don't use :metasploti_cache_exploit_instance_exploit_targets because
                      #   architecturable_architecture_count and platformable_platform_count needs to be set on the
                      #   factories for the exploit_targets
                      # Must be after all association building traits so assocations are populated for writing contents
                      :metasploit_cache_exploit_instance_exploit_class_ancestor_contents,
                      exploit_class: exploit_class,
                      contribution_count: contribution_count,
                      exploit_targets: FactoryGirl.build_list(
                          :metasploit_cache_exploit_target,
                          exploit_target_count,
                          architecturable_architecture_count: architecturable_architecture_count,
                          exploit_instance: nil,
                          platformable_platform_count: platformable_platform_count
                      ),
                      licensable_license_count: licensable_license_count,
                      referencable_reference_count: referencable_reference_count
                  )
                }

                #
                # lets
                #

                let(:architecturable_architecture_count) {
                  2
                }

                let(:contribution_count) {
                  2
                }

                let(:direct_class_load) {
                  Metasploit::Cache::Direct::Class::Load.new(
                      direct_class: exploit_class,
                      logger: logger,
                      metasploit_module: module_ancestor_load.metasploit_module
                  )
                }

                let(:exploit_target_count) {
                  2
                }

                let(:licensable_license_count) {
                  2
                }

                let(:metasploit_framework) {
                  double('Metasploit::Framework')
                }

                let(:module_ancestor_load) {
                  Metasploit::Cache::Module::Ancestor::Load.new(
                      # This should match the major version number of metasploit-framework
                      maximum_version: 4,
                      module_ancestor: exploit_ancestor,
                      logger: logger
                  )
                }

                let(:module_instance_load) {
                  Metasploit::Cache::Module::Instance::Load.new(
                      logger: logger,
                      metasploit_framework: metasploit_framework,
                      metasploit_module_class: direct_class_load.metasploit_class,
                      module_instance: full_metasploit_cache_exploit_instance,
                      persister_class: Metasploit::Cache::Exploit::Instance::Persister
                  )
                }

                let(:platformable_platform_count) {
                  2
                }

                let(:referencable_reference_count) {
                  2
                }

                #
                # Callbacks
                #

                before(:each) do
                  # ensure file is written for encoder load
                  full_metasploit_cache_exploit_instance

                  # remove factory records so that load is forced to populate
                  full_metasploit_cache_exploit_instance.contributions = []
                  full_metasploit_cache_exploit_instance.exploit_targets = []
                  full_metasploit_cache_exploit_instance.licensable_licenses = []
                  full_metasploit_cache_exploit_instance.referencable_references = []
                end

                it 'is loadable' do
                  expect(module_ancestor_load).to load_metasploit_module

                  expect(direct_class_load).to be_valid
                  expect(exploit_class).to be_persisted

                  expect(module_instance_load).to be_valid(:loading)

                  module_instance_load.valid?

                  unless full_metasploit_cache_exploit_instance.valid?
                    # Only covered on failure
                    # :nocov:
                    fail "Expected #{full_metasploit_cache_exploit_instance.class} to be valid, but got errors:\n" \
                         "#{full_metasploit_cache_exploit_instance.errors.full_messages.join("\n")}\n" \
                         "\n" \
                         "Log:\n" \
                         "#{log_string_io.string}\n" \
                         "Expected #{module_instance_load.class} to be valid, but got errors:\n" \
                         "#{module_instance_load.errors.full_messages.join("\n")}"
                    # :nocov:
                  end

                  expect(module_instance_load).to be_valid
                  expect(full_metasploit_cache_exploit_instance).to be_persisted

                  expect(full_metasploit_cache_exploit_instance.contributions.count).to eq(contribution_count)
                  expect(full_metasploit_cache_exploit_instance.licensable_licenses.count).to eq(licensable_license_count)
                  expect(full_metasploit_cache_exploit_instance.exploit_targets.count).to eq(exploit_target_count)
                  expect(full_metasploit_cache_exploit_instance.referencable_references.count).to eq(referencable_reference_count)

                  full_metasploit_cache_exploit_instance.exploit_targets.each do |exploit_target|
                    expect(exploit_target.architecturable_architectures.count).to eq(architecturable_architecture_count)
                    expect(exploit_target.platformable_platforms.count).to eq(platformable_platform_count)
                  end
                end
              end
            end

            context 'without Metasploit::Cache::Module::Ancestor#real_pathname' do
              let(:relative_path) {
                nil
              }

              it 'raises ArgumentError' do
                expect {
                  full_metasploit_cache_exploit_instance
                }.to raise_error(
                         ArgumentError,
                         'Metasploit::Cache::Exploit::Ancestor#real_pathname is `nil` and content cannot be ' \
                         'written.  If this is expected, set `exploit_class_ancestor_contents?: false` ' \
                         'when using the :metasploit_cache_exploit_instance_exploit_class_ancestor_contents trait.'
                     )
              end
            end
          end

          context 'without Metasploit::Cache::Direct::Class#ancestor' do
            let(:exploit_ancestor) {
              nil
            }

            it 'raises ArgumentError' do
              expect {
                full_metasploit_cache_exploit_instance
              }.to raise_error(
                       ArgumentError,
                       'Metasploit::Cache::Exploit::Class#ancestor is `nil` and content cannot be written.  ' \
                       'If this is expected, set `exploit_ancestor_contents?: false` ' \
                       'when using the :metasploit_cache_exploit_instance_exploit_class_ancestor_contents trait.'
                   )
            end
          end
        end

        context 'without #exploit_class' do
          let(:exploit_class) {
            nil
          }

          it 'raises ArgumentError' do
            expect {
              full_metasploit_cache_exploit_instance
            }.to raise_error(
                     ArgumentError,
                     "Metasploit::Cache::Exploit::Instance#exploit_class is `nil` and it can't be used to look " \
                     'up Metasploit::Cache::Direct::Class#ancestor to write content. ' \
                     'If this is expected, set `exploit_class_ancestor_contents?: false` ' \
                     'when using the :metasploit_cache_exploit_instance_exploit_class_ancestor_contents trait.'
                 )
          end
        end
      end
    end

    context 'metasploit_cache_exploit_instance' do
      subject(:metasploit_cache_exploit_instance) {
        FactoryGirl.build(:metasploit_cache_exploit_instance)
      }

      it { is_expected.not_to be_valid }
    end
  end

  context 'validations' do
    it { is_expected.to validate_presence_of :description }
    it { is_expected.to validate_presence_of :disclosed_on }
    it { is_expected.to validate_presence_of :exploit_class }
    it { is_expected.to validate_presence_of :name }
    it { is_expected.to validate_inclusion_of(:privileged).in_array([false, true]) }
    it { is_expected.to validate_inclusion_of(:stance).in_array(Metasploit::Cache::Module::Stance::ALL) }

    it_should_behave_like 'validates at least one in association',
                          :contributions,
                          factory: :metasploit_cache_exploit_instance,
                          traits: [
                              :metasploit_cache_contributable_contributions
                          ]

    it_should_behave_like 'validates at least one in association',
                          :exploit_targets,
                          factory: :metasploit_cache_exploit_instance,
                          traits: [
                              :metasploit_cache_exploit_instance_exploit_targets
                          ]

    it_should_behave_like 'validates at least one in association',
                          :licensable_licenses,
                          factory: :metasploit_cache_exploit_instance,
                          traits: [
                              :metasploit_cache_licensable_licensable_licenses
                          ]

    it_should_behave_like 'validates at least one in association',
                          :referencable_references,
                          factory: :metasploit_cache_exploit_instance,
                          traits: [
                              :metasploit_cache_referencable_referencable_references
                          ]

    context 'validates inclusion of #default_exploit_target in #exploit_targets' do
      subject(:default_exploit_target_errors) {
        exploit_instance.errors[:default_exploit_target]
      }

      let(:error) {
        I18n.translate!('activerecord.errors.models.metasploit/cache/exploit/instance.attributes.default_exploit_target.inclusion')
      }

      let(:exploit_instance) {
        described_class.new
      }

      context 'without #default_exploit_target' do
        before(:each) do
          exploit_instance.default_exploit_target = nil
        end

        it { is_expected.not_to include(error) }
      end

      context 'with #default_exploit_target' do
        #
        # lets
        #

        let(:default_exploit_target) {
          Metasploit::Cache::Exploit::Target.new
        }

        #
        # Callbacks
        #

        before(:each) do
          exploit_instance.default_exploit_target = default_exploit_target
        end

        context 'in #exploit_targets' do
          before(:each) do
            exploit_instance.exploit_targets = [
                default_exploit_target
            ]
            exploit_instance.valid?
          end

          it { is_expected.not_to include(error) }
        end

        context 'not in #exploit_targets' do
          before(:each) do
            exploit_instance.exploit_targets = []
            exploit_instance.valid?
          end

          it { is_expected.to include(error) }
        end
      end
    end

    # validate_uniqueness_of needs a pre-existing record of the same class to work correctly when the `null: false`
    # constraints exist for other fields.
    context 'with existing record' do
      let!(:existing_exploit_instance) {
        FactoryGirl.create(
            :full_metasploit_cache_exploit_instance
        )
      }

      it { is_expected.to validate_uniqueness_of :exploit_class_id }
    end
  end
end