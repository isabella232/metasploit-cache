RSpec.describe Metasploit::Cache::Exploit::Target do
  it_should_behave_like 'Metasploit::Concern.run'

  context 'associations' do
    it { is_expected.to have_many(:architectures).class_name('Metasploit::Cache::Architecture') }
    it { is_expected.to have_many(:architecturable_architectures).class_name('Metasploit::Cache::Architecturable::Architecture').dependent(:destroy).inverse_of(:architecturable) }
    it { is_expected.to belong_to(:exploit_instance).class_name('Metasploit::Cache::Exploit::Instance').inverse_of(:exploit_targets) }
  end

  context 'database' do
    context 'columns' do
      it { is_expected.to have_db_column(:exploit_instance_id).of_type(:integer).with_options(null: false) }
      it { is_expected.to have_db_column(:index).of_type(:integer).with_options(null: false) }
      it { is_expected.to have_db_column(:name).of_type(:string).with_options(null: false) }
    end

    context 'indices' do
      it { is_expected.to have_db_index(:exploit_instance_id).unique(false) }
      it { is_expected.to have_db_index([:exploit_instance_id, :index]).unique(true) }
      it { is_expected.to have_db_index([:exploit_instance_id, :name]).unique(true) }
    end
  end

  context 'factories' do
    context 'metasploit_cache_exploit_target' do
      subject(:metasploit_cache_exploit_target) {
        FactoryGirl.build(:metasploit_cache_exploit_target)
      }

      it { is_expected.to be_valid }
    end
  end

  context 'validations' do
    it { is_expected.to validate_presence_of :exploit_instance }
    it { is_expected.to validate_presence_of :index }
    it { is_expected.to validate_presence_of :name }

    # validate_uniqueness_of needs a pre-existing record of the same class to work correctly when the `null: false`
    # constraints exist for other fields.
    context 'with existing record' do
      let!(:existing_exploit_target) {
        FactoryGirl.create(:metasploit_cache_exploit_target)
      }

      it { is_expected.to validate_uniqueness_of(:index).scoped_to(:exploit_instance_id) }
      it { is_expected.to validate_uniqueness_of(:name).scoped_to(:exploit_instance_id) }
    end
  end
end